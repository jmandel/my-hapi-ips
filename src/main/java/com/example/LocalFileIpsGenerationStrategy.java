package com.example;

import ca.uhn.fhir.context.FhirContext;
import ca.uhn.fhir.rest.api.server.RequestDetails;
import ca.uhn.fhir.rest.param.TokenParam;
import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import org.hl7.fhir.instance.model.api.IBaseBundle;
import org.hl7.fhir.instance.model.api.IBaseResource;
import org.hl7.fhir.instance.model.api.IIdType;
import org.hl7.fhir.r4.model.*;
import ca.uhn.fhir.jpa.ips.api.*;
import ca.uhn.fhir.jpa.ips.strategy.*;

import java.io.File;
import java.io.IOException;
import java.util.*;

public class LocalFileIpsGenerationStrategy extends BaseIpsGenerationStrategy {

    private final String directoryPath;
    private final ObjectMapper objectMapper = new ObjectMapper();
    private final Map<Class<? extends IBaseResource>, List<IBaseResource>> resourceMap = new HashMap<>();

    public LocalFileIpsGenerationStrategy(String directoryPath) {
        this.directoryPath = directoryPath;
        loadResourcesFromDirectory();
    }

    @Override
    public String getBundleProfile() {
        return "http://hl7.org/fhir/uv/ips/StructureDefinition-ips";
    }

    @Override
    public void initialize() {
        // Perform any initialization logic here
    }

    @Nonnull
    private Section createSection(String title, String code, String display, List<Class<? extends IBaseResource>> resourceTypes, @Nullable INoInfoGenerator noInfoGenerator) {
        Section.SectionBuilder builder = Section.newBuilder()
                .withTitle(title)
                .withSectionSystem("http://loinc.org")
                .withSectionCode(code)
                .withSectionDisplay(display)
                .withProfile("http://hl7.org/fhir/uv/ips/StructureDefinition-Composition-uv-ips-definitions.html#Composition.section:" + title.replace(" ", ""));
        resourceTypes.forEach(builder::withResourceType);
        if (noInfoGenerator != null) {
            builder.withNoInfoGenerator(noInfoGenerator);
        }
        return builder.build();
    }

    @Nonnull
    private Section createSection(String title, String code, String display, List<Class<? extends IBaseResource>> resourceTypes) {
        return createSection(title, code, display, resourceTypes, null);
    }

@Nonnull
@Override
public ISectionResourceSupplier getSectionResourceSupplier(@Nonnull Section theSection) {
    return new ISectionResourceSupplier() {
        @Override
        public <T extends IBaseResource> List<ResourceEntry> fetchResourcesForSection(IpsContext ipsContext, IpsSectionContext<T> sectionContext, RequestDetails requestDetails) {
            List<ResourceEntry> resourceEntries = new ArrayList<>();
            for (Class<? extends IBaseResource> resourceType : theSection.getResourceTypes()) {
                List<IBaseResource> resources = resourceMap.getOrDefault(resourceType, List.of());
                for (IBaseResource resource : resources) {
                    System.out.println("Adding resource: " + resource.getIdElement().getValue());
                    resourceEntries.add(new ResourceEntry(resource, InclusionTypeEnum.PRIMARY_RESOURCE));
                }
            }
            return resourceEntries;
        }
    };
}

    @Override
    public IBaseResource createAuthor() {
        Organization author = new Organization();
        author.setName("Generated by LocalFileIpsGenerationStrategy");
        return author;
    }

    @Nonnull
    @Override
    public IBaseResource fetchPatient(IIdType thePatientId, RequestDetails theRequestDetails) throws ResourceNotFoundException {
        return fetchPatientResource();
    }

    @Nonnull
    @Override
    public IBaseResource fetchPatient(TokenParam thePatientIdentifier, RequestDetails theRequestDetails) {
        return fetchPatientResource();
    }

    @Override
    public void postManipulateIpsBundle(IBaseBundle theBundle) {
        // Perform any post-processing manipulations on the bundle
    }

private void loadResourcesFromDirectory() {
    File directory = new File(directoryPath);
    if (!directory.isDirectory()) {
        throw new IllegalArgumentException("Provided path is not a directory: " + directoryPath);
    }

    File[] files = directory.listFiles((dir, name) -> name.endsWith(".json"));
    if (files == null) {
        throw new IllegalArgumentException("Failed to list files in directory: " + directoryPath);
    }

    for (File file : files) {
        try {
            JsonNode rootNode = objectMapper.readTree(file);
            if (rootNode.isArray()) {
                for (JsonNode node : rootNode) {
                    IBaseResource resource = FhirContext.forR4().newJsonParser().parseResource(node.toString());
                    addResourceToMap(resource);
                }
            } else if (rootNode.has("resourceType") && "Bundle".equals(rootNode.get("resourceType").asText())) {
                // If the root node is a Bundle, iterate over its entries
                JsonNode entries = rootNode.get("entry");
                if (entries != null && entries.isArray()) {
                    for (JsonNode entry : entries) {
                        JsonNode resourceNode = entry.get("resource");
                        if (resourceNode != null) {
                            IBaseResource resource = FhirContext.forR4().newJsonParser().parseResource(resourceNode.toString());
                            addResourceToMap(resource);
                        }
                    }
                }
            } else {
                IBaseResource resource = FhirContext.forR4().newJsonParser().parseResource(rootNode.toString());
                addResourceToMap(resource);
            }
        } catch (IOException e) {
            throw new RuntimeException("Failed to read file: " + file.getPath(), e);
        }
    }
}

    private void addResourceToMap(IBaseResource resource) {
        resourceMap.computeIfAbsent(resource.getClass(), k -> new ArrayList<>()).add(resource);
    }

    protected Patient fetchPatientResource() {
        List<IBaseResource> patients = resourceMap.get(Patient.class);
        if (patients == null || patients.isEmpty()) {
            throw new ResourceNotFoundException("Patient resource not found");
        }
        return (Patient) patients.get(0);
    }
}
